{
  "openapi": "3.0.1",
  "info": {
    "title": "SMSwithoutBorders API",
    "version": "2.0.0"
  },
  "servers": [{
    "url": "http://localhost:9000"
  }],
  "tags": [{
    "name": "Get new tokens",
    "description": "Store new token(s) for a user by platform"
  }, {
    "name": "Register on platforms",
    "description": "Create an account on a third party platform"
  }, {
    "name": "Authentication",
    "description": "Login and Signup"
  }, {
    "name": "Platforms",
    "description": "Handling platforms"
  }],
  "paths": {
    "/signup": {
      "post": {
        "tags": [
          "Authentication"
        ],
        "summary": "Create a new User",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "phone_number": {
                    "type": "string"
                  },
                  "name": {
                    "type": "string"
                  },
                  "country_code": {
                    "type": "string"
                  },
                  "password": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "A cerification code is sent to the user",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "session_id": {
                      "type": "string"
                    },
                    "svid": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request (e.g missing required fields)",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized (e.g User, Platform not found)",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "409": {
            "description": "Conflict (e.g Duplicate Users, Platforms found)",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Authentication"
        ],
        "summary": "Validate a new User",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "session_id": {
                    "type": "string"
                  },
                  "svid": {
                    "type": "string"
                  },
                  "code": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request (e.g missing required fields)",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized (e.g User, Platform not found)",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden (e.g Invalid verification session)",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "404": {
            "description": "Not Found (e.g User not found)",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "409": {
            "description": "Conflict (e.g Duplicate Users, Platforms found)",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/login": {
      "post": {
        "tags": [
          "Authentication"
        ],
        "summary": "Authenticate a User",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "phone_number": {
                    "type": "string"
                  },
                  "password": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "A cookie is stored in the browser",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "uid": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request (e.g missing required fields)",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized (e.g session invalid)",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "404": {
            "description": "Not Found (e.g User not found)",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "409": {
            "description": "Conflict (e.g Duplicate Users, Platforms found)",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/users/{user_id}/platforms/{platform}/protocols/{protocol}": {
      "post": {
        "tags": [
          "Get new tokens"
        ],
        "summary": "Token Init. Request body for Gmail = {}, Twitter = {}, Telegram = {phone_number}",
        "parameters": [{
            "in": "path",
            "name": "user_id",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "User's Id"
          }, {
            "in": "path",
            "name": "platform",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "Platform's name (e.g gmail)"
          },
          {
            "in": "path",
            "name": "protocol",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "Protocol's name (e.g oauth)"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "phone_number": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful. Response body for Gmail = {url, platform}, Twitter = {url, platform}, Telegram: (body[200 - Unauthorized, 201 - response code required], platform). The state of Telegram responses are in 'body' and should be parsed for current state of Telegram app. 200 meaning the user is not authorized to make this request, 201 meaning code has been sent back to user via SMS or Telegram session",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "url": {
                      "type": "string"
                    },
                    "body": {
                      "type": "string"
                    },
                    "platform": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request (e.g missing required fields)",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized (e.g User, Platform not found)",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden (e.g Invalid verification session)",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "404": {
            "description": "Not Found (e.g User not found)",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "409": {
            "description": "Conflict (e.g Duplicate Users, Platforms found)",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Get new tokens"
        ],
        "summary": "Token Verification. Request body for Gmail = {code}, Twitter = {oauth_token, oauth_verifier}, Telegram = {phone_number, code}",
        "parameters": [{
            "in": "path",
            "name": "user_id",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "User's Id"
          }, {
            "in": "path",
            "name": "platform",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "Platform's name (e.g gmail)"
          },
          {
            "in": "path",
            "name": "protocol",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "Protocol's name (e.g oauth)"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "code": {
                    "type": "string"
                  },
                  "oauth_token": {
                    "type": "string"
                  },
                  "oauth_verifier": {
                    "type": "string"
                  },
                  "phone_number": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful. Response body for Gmail = {}, Twitter = {}, Telegram: (body[202 - create a telegram account], initialization_url). The state of Telegram responses are in 'body' and should be parsed for current state of Telegram app. 202 meaning the user doesn't have a telegram account and need to create one. If body is 202 it comes with an initialization_url to start the next step of creating a telegram account",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "body": {
                      "type": "string"
                    },
                    "initialization_url": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request (e.g missing required fields)",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized (e.g User, Platform not found)",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden (e.g User does not have access rights to the content, invalid verification code)",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "404": {
            "description": "Not Found (e.g User not found)",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "409": {
            "description": "Conflict (e.g Duplicate Users, Platforms found)",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/users/{user_id}/platforms/{platform}/protocols/{protocol}/{action}": {
      "put": {
        "tags": [
          "Register on platforms"
        ],
        "summary": "Token Verification. Request body for Telegram = {phone_number, first_name, last_name}",
        "parameters": [{
            "in": "path",
            "name": "user_id",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "User's Id"
          }, {
            "in": "path",
            "name": "platform",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "Platform's name (e.g gmail)"
          },
          {
            "in": "path",
            "name": "protocol",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "Protocol's name (e.g oauth)"
          },
          {
            "in": "path",
            "name": "action",
            "schema": {
              "type": "string"
            },
            "description": "e.g register"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "first_name": {
                    "type": "string"
                  },
                  "last_name": {
                    "type": "string"
                  },
                  "phone_number": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful. Response body for Telegram: (body = '', initialization_url = ''). The state of Telegram responses are in 'body' and should be parsed for current state of Telegram app. Empty body string (body=''), and empty initialization_url string (initialization_url='') meaning the users account was created and stored successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "body": {
                      "type": "string"
                    },
                    "initialization_url": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request (e.g missing required fields)",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized (e.g User, Platform not found)",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden (e.g User does not have access rights to the content, invalid verification code)",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "404": {
            "description": "Not Found (e.g User not found)",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "409": {
            "description": "Conflict (e.g Duplicate Users, Platforms found)",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/users/{user_id}/platforms": {
      "get": {
        "tags": [
          "Platforms"
        ],
        "summary": "Get saved and unsaved platforms for a user",
        "parameters": [{
          "in": "path",
          "name": "user_id",
          "schema": {
            "type": "string"
          },
          "required": true,
          "description": "User's Id"
        }],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Specified cookie has been deleted from the browser",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "unsaved_platforms": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "string"
                          },
                          "name": {
                            "type": "string"
                          },
                          "description": {
                            "type": "string"
                          },
                          "logo": {
                            "type": "string"
                          },
                          "initialization_url": {
                            "type": "string"
                          },
                          "type": {
                            "type": "string"
                          },
                          "letter": {
                            "type": "string"
                          }
                        }
                      }
                    },
                    "saved_platforms": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "string"
                          },
                          "name": {
                            "type": "string"
                          },
                          "description": {
                            "type": "string"
                          },
                          "logo": {
                            "type": "string"
                          },
                          "initialization_url": {
                            "type": "string"
                          },
                          "type": {
                            "type": "string"
                          },
                          "letter": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request (e.g missing required fields)",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized (e.g session invalid)",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "404": {
            "description": "Not Found (e.g User not found)",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "409": {
            "description": "Conflict (e.g Duplicate Users, Platforms found)",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/users/{user_id}/logout": {
      "post": {
        "tags": [
          "Authentication"
        ],
        "summary": "Invalidates a User's session",
        "parameters": [{
          "in": "path",
          "name": "user_id",
          "schema": {
            "type": "string"
          },
          "required": true,
          "description": "User's Id"
        }],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Specified cookie has been deleted from the browser",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request (e.g missing required fields)",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized (e.g session invalid)",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "404": {
            "description": "Not Found (e.g User not found)",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "409": {
            "description": "Conflict (e.g Duplicate Users, Platforms found)",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    }
  }
}