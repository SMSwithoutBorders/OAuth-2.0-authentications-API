syntax = "proto3";

package publisher.v1;

// Request message for getting the authorization URL
message GetAuthorizationUrlRequest {
    // List of scopes for the authorization
    repeated string scope = 1;
    // Redirect URI for the authorization response
    string redirect_uri = 2;
    // Client ID of the application
    string client_id = 3;
    // URL of the authorization server's authorization endpoint.
    string authorization_endpoint = 4;
    // Optional state parameter to prevent CSRF attacks. If not given, it will be generated for you
    string state = 5;
    // Optional code verifier for PKCE (Proof Key for Code Exchange)
    string code_verifier = 6;
    // Flag to indicate if the code verifier should be auto-generated
    bool autogenerate_code_verifier = 7;
    // Optional access type parameter (online or offline)
    string access_type = 8;
    // Optional prompt parameter (none, consent, select_account)
    string prompt = 9;
}

// Response message for the GetAuthorizationUrl RPC
message GetAuthorizationUrlResponse {
    // The authorization URL
    string authorization_url = 1;
    // The state parameter for preventing CSRF attacks
    string state = 2;
    // The code verifier used for PKCE
    string code_verifier = 3;
    // Optional message providing additional information
    string message = 4;
}

// Request message for exchanging the OAuth2 authorization code for a token
message ExchangeOAuth2CodeRequest {
    // The authorization code received from the authorization server
    string authorization_code = 1;
    // The redirect URI used in the authorization request
    string redirect_uri = 2;
    // Client ID of the application
    string client_id = 3;
    // Client secret of the application
    string client_secret = 4;
    // Optional code verifier for PKCE (Proof Key for Code Exchange)
    string code_verifier = 5;
    // URL of the authorization server's token endpoint.
    string token_endpoint = 6;
}
  
// Response message for the ExchangeOAuth2Code RPC
message ExchangeOAuth2CodeResponse {
    // Token information (JSON string)
    string token = 1;
    // Profile information (JSON string)
    string profile = 2;
    // Optional message providing additional information
    string message = 3;
}

// Service definition for Publisher
service Publisher {
    // RPC for getting the authorization URL
    rpc GetAuthorizationUrl(GetAuthorizationUrlRequest) returns (GetAuthorizationUrlResponse);
    // RPC for exchanging OAuth2 authorization code for a token
    rpc ExchangeOAuth2Code(ExchangeOAuth2CodeRequest) returns (ExchangeOAuth2CodeResponse);
}
